-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ALU_sys_HDL_op_data_exe_wb_Pipeline_exe is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_a_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_a_empty_n : IN STD_LOGIC;
    data_a_read : OUT STD_LOGIC;
    data_b_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_b_empty_n : IN STD_LOGIC;
    data_b_read : OUT STD_LOGIC;
    data_result_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_result_full_n : IN STD_LOGIC;
    data_result_write : OUT STD_LOGIC;
    ALU_operation_MEM_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ALU_operation_MEM_ce0 : OUT STD_LOGIC;
    ALU_operation_MEM_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ALU_sys_HDL_op_data_exe_wb_Pipeline_exe is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ALU_operation_MEM_load_reg_167 : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter37_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op79_write_state6 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln127_fu_95_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal data_result_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ALU_operation_MEM_load_reg_167_pp0_iter36_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_predicate_pred218_state6 : BOOLEAN;
    signal ap_predicate_pred225_state6 : BOOLEAN;
    signal ap_predicate_pred230_state6 : BOOLEAN;
    signal ap_predicate_pred235_state6 : BOOLEAN;
    signal data_a_blk_n : STD_LOGIC;
    signal data_b_blk_n : STD_LOGIC;
    signal i_reg_137 : STD_LOGIC_VECTOR (8 downto 0);
    signal a_reg_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter27_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter28_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter29_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter30_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter31_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter32_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter33_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter34_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter35_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter36_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_146_pp0_iter37_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter27_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter28_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter29_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter30_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter31_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter32_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter33_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter34_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter35_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter36_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_154_pp0_iter37_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter27_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter28_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter29_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter30_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter31_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter32_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter33_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter34_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ALU_operation_MEM_load_reg_167_pp0_iter35_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_83_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln153_reg_171 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sdiv_ln148_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln127_fu_112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_fu_46 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln127_fu_101_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sub_ln144_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln140_fu_125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_83_ce : STD_LOGIC;
    signal grp_fu_116_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ALU_sys_HDL_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ALU_sys_HDL_sdiv_32s_32s_32_36_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ALU_sys_HDL_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_2_1_U12 : component ALU_sys_HDL_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_reg_154_pp0_iter35_reg,
        din1 => a_reg_146_pp0_iter35_reg,
        ce => grp_fu_83_ce,
        dout => grp_fu_83_p2);

    sdiv_32s_32s_32_36_1_U13 : component ALU_sys_HDL_sdiv_32s_32s_32_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_reg_146,
        din1 => b_reg_154,
        ce => grp_fu_116_ce,
        dout => grp_fu_116_p2);

    flow_control_loop_pipe_sequential_init_U : component ALU_sys_HDL_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter37_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_5_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln127_fu_95_p2 = ap_const_lv1_0))) then 
                    i_5_fu_46 <= add_ln127_fu_101_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_5_fu_46 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ALU_operation_MEM_load_reg_167 <= ALU_operation_MEM_q0;
                ALU_operation_MEM_load_reg_167_pp0_iter10_reg <= ALU_operation_MEM_load_reg_167_pp0_iter9_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter11_reg <= ALU_operation_MEM_load_reg_167_pp0_iter10_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter12_reg <= ALU_operation_MEM_load_reg_167_pp0_iter11_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter13_reg <= ALU_operation_MEM_load_reg_167_pp0_iter12_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter14_reg <= ALU_operation_MEM_load_reg_167_pp0_iter13_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter15_reg <= ALU_operation_MEM_load_reg_167_pp0_iter14_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter16_reg <= ALU_operation_MEM_load_reg_167_pp0_iter15_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter17_reg <= ALU_operation_MEM_load_reg_167_pp0_iter16_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter18_reg <= ALU_operation_MEM_load_reg_167_pp0_iter17_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter19_reg <= ALU_operation_MEM_load_reg_167_pp0_iter18_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter20_reg <= ALU_operation_MEM_load_reg_167_pp0_iter19_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter21_reg <= ALU_operation_MEM_load_reg_167_pp0_iter20_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter22_reg <= ALU_operation_MEM_load_reg_167_pp0_iter21_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter23_reg <= ALU_operation_MEM_load_reg_167_pp0_iter22_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter24_reg <= ALU_operation_MEM_load_reg_167_pp0_iter23_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter25_reg <= ALU_operation_MEM_load_reg_167_pp0_iter24_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter26_reg <= ALU_operation_MEM_load_reg_167_pp0_iter25_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter27_reg <= ALU_operation_MEM_load_reg_167_pp0_iter26_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter28_reg <= ALU_operation_MEM_load_reg_167_pp0_iter27_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter29_reg <= ALU_operation_MEM_load_reg_167_pp0_iter28_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter30_reg <= ALU_operation_MEM_load_reg_167_pp0_iter29_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter31_reg <= ALU_operation_MEM_load_reg_167_pp0_iter30_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter32_reg <= ALU_operation_MEM_load_reg_167_pp0_iter31_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter33_reg <= ALU_operation_MEM_load_reg_167_pp0_iter32_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter34_reg <= ALU_operation_MEM_load_reg_167_pp0_iter33_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter35_reg <= ALU_operation_MEM_load_reg_167_pp0_iter34_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter36_reg <= ALU_operation_MEM_load_reg_167_pp0_iter35_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter37_reg <= ALU_operation_MEM_load_reg_167_pp0_iter36_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter3_reg <= ALU_operation_MEM_load_reg_167;
                ALU_operation_MEM_load_reg_167_pp0_iter4_reg <= ALU_operation_MEM_load_reg_167_pp0_iter3_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter5_reg <= ALU_operation_MEM_load_reg_167_pp0_iter4_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter6_reg <= ALU_operation_MEM_load_reg_167_pp0_iter5_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter7_reg <= ALU_operation_MEM_load_reg_167_pp0_iter6_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter8_reg <= ALU_operation_MEM_load_reg_167_pp0_iter7_reg;
                ALU_operation_MEM_load_reg_167_pp0_iter9_reg <= ALU_operation_MEM_load_reg_167_pp0_iter8_reg;
                a_reg_146_pp0_iter10_reg <= a_reg_146_pp0_iter9_reg;
                a_reg_146_pp0_iter11_reg <= a_reg_146_pp0_iter10_reg;
                a_reg_146_pp0_iter12_reg <= a_reg_146_pp0_iter11_reg;
                a_reg_146_pp0_iter13_reg <= a_reg_146_pp0_iter12_reg;
                a_reg_146_pp0_iter14_reg <= a_reg_146_pp0_iter13_reg;
                a_reg_146_pp0_iter15_reg <= a_reg_146_pp0_iter14_reg;
                a_reg_146_pp0_iter16_reg <= a_reg_146_pp0_iter15_reg;
                a_reg_146_pp0_iter17_reg <= a_reg_146_pp0_iter16_reg;
                a_reg_146_pp0_iter18_reg <= a_reg_146_pp0_iter17_reg;
                a_reg_146_pp0_iter19_reg <= a_reg_146_pp0_iter18_reg;
                a_reg_146_pp0_iter20_reg <= a_reg_146_pp0_iter19_reg;
                a_reg_146_pp0_iter21_reg <= a_reg_146_pp0_iter20_reg;
                a_reg_146_pp0_iter22_reg <= a_reg_146_pp0_iter21_reg;
                a_reg_146_pp0_iter23_reg <= a_reg_146_pp0_iter22_reg;
                a_reg_146_pp0_iter24_reg <= a_reg_146_pp0_iter23_reg;
                a_reg_146_pp0_iter25_reg <= a_reg_146_pp0_iter24_reg;
                a_reg_146_pp0_iter26_reg <= a_reg_146_pp0_iter25_reg;
                a_reg_146_pp0_iter27_reg <= a_reg_146_pp0_iter26_reg;
                a_reg_146_pp0_iter28_reg <= a_reg_146_pp0_iter27_reg;
                a_reg_146_pp0_iter29_reg <= a_reg_146_pp0_iter28_reg;
                a_reg_146_pp0_iter2_reg <= a_reg_146;
                a_reg_146_pp0_iter30_reg <= a_reg_146_pp0_iter29_reg;
                a_reg_146_pp0_iter31_reg <= a_reg_146_pp0_iter30_reg;
                a_reg_146_pp0_iter32_reg <= a_reg_146_pp0_iter31_reg;
                a_reg_146_pp0_iter33_reg <= a_reg_146_pp0_iter32_reg;
                a_reg_146_pp0_iter34_reg <= a_reg_146_pp0_iter33_reg;
                a_reg_146_pp0_iter35_reg <= a_reg_146_pp0_iter34_reg;
                a_reg_146_pp0_iter36_reg <= a_reg_146_pp0_iter35_reg;
                a_reg_146_pp0_iter37_reg <= a_reg_146_pp0_iter36_reg;
                a_reg_146_pp0_iter3_reg <= a_reg_146_pp0_iter2_reg;
                a_reg_146_pp0_iter4_reg <= a_reg_146_pp0_iter3_reg;
                a_reg_146_pp0_iter5_reg <= a_reg_146_pp0_iter4_reg;
                a_reg_146_pp0_iter6_reg <= a_reg_146_pp0_iter5_reg;
                a_reg_146_pp0_iter7_reg <= a_reg_146_pp0_iter6_reg;
                a_reg_146_pp0_iter8_reg <= a_reg_146_pp0_iter7_reg;
                a_reg_146_pp0_iter9_reg <= a_reg_146_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                    ap_predicate_pred218_state6 <= (ap_const_lv32_0 = ALU_operation_MEM_load_reg_167_pp0_iter36_reg);
                    ap_predicate_pred225_state6 <= (ap_const_lv32_1 = ALU_operation_MEM_load_reg_167_pp0_iter36_reg);
                    ap_predicate_pred230_state6 <= (ap_const_lv32_2 = ALU_operation_MEM_load_reg_167_pp0_iter36_reg);
                    ap_predicate_pred235_state6 <= (ap_const_lv32_3 = ALU_operation_MEM_load_reg_167_pp0_iter36_reg);
                b_reg_154_pp0_iter10_reg <= b_reg_154_pp0_iter9_reg;
                b_reg_154_pp0_iter11_reg <= b_reg_154_pp0_iter10_reg;
                b_reg_154_pp0_iter12_reg <= b_reg_154_pp0_iter11_reg;
                b_reg_154_pp0_iter13_reg <= b_reg_154_pp0_iter12_reg;
                b_reg_154_pp0_iter14_reg <= b_reg_154_pp0_iter13_reg;
                b_reg_154_pp0_iter15_reg <= b_reg_154_pp0_iter14_reg;
                b_reg_154_pp0_iter16_reg <= b_reg_154_pp0_iter15_reg;
                b_reg_154_pp0_iter17_reg <= b_reg_154_pp0_iter16_reg;
                b_reg_154_pp0_iter18_reg <= b_reg_154_pp0_iter17_reg;
                b_reg_154_pp0_iter19_reg <= b_reg_154_pp0_iter18_reg;
                b_reg_154_pp0_iter20_reg <= b_reg_154_pp0_iter19_reg;
                b_reg_154_pp0_iter21_reg <= b_reg_154_pp0_iter20_reg;
                b_reg_154_pp0_iter22_reg <= b_reg_154_pp0_iter21_reg;
                b_reg_154_pp0_iter23_reg <= b_reg_154_pp0_iter22_reg;
                b_reg_154_pp0_iter24_reg <= b_reg_154_pp0_iter23_reg;
                b_reg_154_pp0_iter25_reg <= b_reg_154_pp0_iter24_reg;
                b_reg_154_pp0_iter26_reg <= b_reg_154_pp0_iter25_reg;
                b_reg_154_pp0_iter27_reg <= b_reg_154_pp0_iter26_reg;
                b_reg_154_pp0_iter28_reg <= b_reg_154_pp0_iter27_reg;
                b_reg_154_pp0_iter29_reg <= b_reg_154_pp0_iter28_reg;
                b_reg_154_pp0_iter2_reg <= b_reg_154;
                b_reg_154_pp0_iter30_reg <= b_reg_154_pp0_iter29_reg;
                b_reg_154_pp0_iter31_reg <= b_reg_154_pp0_iter30_reg;
                b_reg_154_pp0_iter32_reg <= b_reg_154_pp0_iter31_reg;
                b_reg_154_pp0_iter33_reg <= b_reg_154_pp0_iter32_reg;
                b_reg_154_pp0_iter34_reg <= b_reg_154_pp0_iter33_reg;
                b_reg_154_pp0_iter35_reg <= b_reg_154_pp0_iter34_reg;
                b_reg_154_pp0_iter36_reg <= b_reg_154_pp0_iter35_reg;
                b_reg_154_pp0_iter37_reg <= b_reg_154_pp0_iter36_reg;
                b_reg_154_pp0_iter3_reg <= b_reg_154_pp0_iter2_reg;
                b_reg_154_pp0_iter4_reg <= b_reg_154_pp0_iter3_reg;
                b_reg_154_pp0_iter5_reg <= b_reg_154_pp0_iter4_reg;
                b_reg_154_pp0_iter6_reg <= b_reg_154_pp0_iter5_reg;
                b_reg_154_pp0_iter7_reg <= b_reg_154_pp0_iter6_reg;
                b_reg_154_pp0_iter8_reg <= b_reg_154_pp0_iter7_reg;
                b_reg_154_pp0_iter9_reg <= b_reg_154_pp0_iter8_reg;
                mul_ln153_reg_171 <= grp_fu_83_p2;
                sdiv_ln148_reg_176 <= grp_fu_116_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                a_reg_146 <= data_a_dout;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                b_reg_154 <= data_b_dout;
                i_reg_137 <= ap_sig_allocacmp_i;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ALU_operation_MEM_address0 <= zext_ln127_fu_112_p1(9 - 1 downto 0);

    ALU_operation_MEM_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ALU_operation_MEM_ce0 <= ap_const_logic_1;
        else 
            ALU_operation_MEM_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln127_fu_101_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv9_1));
    add_ln140_fu_125_p2 <= std_logic_vector(signed(b_reg_154_pp0_iter37_reg) + signed(a_reg_146_pp0_iter37_reg));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter38, ap_block_state2_pp0_stage0_iter1, ap_block_state6_pp0_stage0_iter38)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter38) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter38, ap_block_state2_pp0_stage0_iter1, ap_block_state6_pp0_stage0_iter38)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter38) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter38, ap_block_state2_pp0_stage0_iter1, ap_block_state6_pp0_stage0_iter38)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter38) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(data_a_empty_n, data_b_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((data_b_empty_n = ap_const_logic_0) or (data_a_empty_n = ap_const_logic_0));
    end process;


    ap_block_state6_pp0_stage0_iter38_assign_proc : process(data_result_full_n, ALU_operation_MEM_load_reg_167_pp0_iter37_reg, ap_predicate_op79_write_state6)
    begin
                ap_block_state6_pp0_stage0_iter38 <= (((ap_predicate_op79_write_state6 = ap_const_boolean_1) and (data_result_full_n = ap_const_logic_0)) or ((ap_const_lv32_1 = ALU_operation_MEM_load_reg_167_pp0_iter37_reg) and (data_result_full_n = ap_const_logic_0)) or ((ap_const_lv32_2 = ALU_operation_MEM_load_reg_167_pp0_iter37_reg) and (data_result_full_n = ap_const_logic_0)) or ((ap_const_lv32_3 = ALU_operation_MEM_load_reg_167_pp0_iter37_reg) and (data_result_full_n = ap_const_logic_0)) or ((data_result_full_n = ap_const_logic_0) and (ap_const_lv32_0 = ALU_operation_MEM_load_reg_167_pp0_iter37_reg)));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln127_fu_95_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln127_fu_95_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter37_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter37_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op79_write_state6_assign_proc : process(ALU_operation_MEM_load_reg_167_pp0_iter37_reg)
    begin
                ap_predicate_op79_write_state6 <= (not((ap_const_lv32_0 = ALU_operation_MEM_load_reg_167_pp0_iter37_reg)) and not((ap_const_lv32_1 = ALU_operation_MEM_load_reg_167_pp0_iter37_reg)) and not((ap_const_lv32_2 = ALU_operation_MEM_load_reg_167_pp0_iter37_reg)) and not((ap_const_lv32_3 = ALU_operation_MEM_load_reg_167_pp0_iter37_reg)));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_5_fu_46, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_i <= i_5_fu_46;
        end if; 
    end process;


    data_a_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, data_a_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_a_blk_n <= data_a_empty_n;
        else 
            data_a_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_a_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_a_read <= ap_const_logic_1;
        else 
            data_a_read <= ap_const_logic_0;
        end if; 
    end process;


    data_b_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, data_b_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_b_blk_n <= data_b_empty_n;
        else 
            data_b_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_b_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_b_read <= ap_const_logic_1;
        else 
            data_b_read <= ap_const_logic_0;
        end if; 
    end process;


    data_result_blk_n_assign_proc : process(ap_enable_reg_pp0_iter38, data_result_full_n, ap_predicate_op79_write_state6, ap_block_pp0_stage0, ap_predicate_pred218_state6, ap_predicate_pred225_state6, ap_predicate_pred230_state6, ap_predicate_pred235_state6)
    begin
        if ((((ap_predicate_pred235_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1)) or ((ap_predicate_pred230_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1)) or ((ap_predicate_pred225_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1)) or ((ap_predicate_pred218_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op79_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1)))) then 
            data_result_blk_n <= data_result_full_n;
        else 
            data_result_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_result_din_assign_proc : process(ap_enable_reg_pp0_iter38, ap_predicate_op79_write_state6, ap_predicate_pred218_state6, ap_predicate_pred225_state6, ap_predicate_pred230_state6, ap_predicate_pred235_state6, mul_ln153_reg_171, sdiv_ln148_reg_176, ap_block_pp0_stage0_01001, sub_ln144_fu_120_p2, add_ln140_fu_125_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then
            if ((ap_predicate_op79_write_state6 = ap_const_boolean_1)) then 
                data_result_din <= ap_const_lv32_0;
            elsif ((ap_predicate_pred218_state6 = ap_const_boolean_1)) then 
                data_result_din <= add_ln140_fu_125_p2;
            elsif ((ap_predicate_pred225_state6 = ap_const_boolean_1)) then 
                data_result_din <= sub_ln144_fu_120_p2;
            elsif ((ap_predicate_pred230_state6 = ap_const_boolean_1)) then 
                data_result_din <= sdiv_ln148_reg_176;
            elsif ((ap_predicate_pred235_state6 = ap_const_boolean_1)) then 
                data_result_din <= mul_ln153_reg_171;
            else 
                data_result_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            data_result_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_result_write_assign_proc : process(ap_enable_reg_pp0_iter38, ap_predicate_op79_write_state6, ap_block_pp0_stage0_11001, ap_predicate_pred218_state6, ap_predicate_pred225_state6, ap_predicate_pred230_state6, ap_predicate_pred235_state6)
    begin
        if ((((ap_predicate_pred235_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1)) or ((ap_predicate_pred230_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1)) or ((ap_predicate_pred225_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1)) or ((ap_predicate_pred218_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op79_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1)))) then 
            data_result_write <= ap_const_logic_1;
        else 
            data_result_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_116_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_116_ce <= ap_const_logic_1;
        else 
            grp_fu_116_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_83_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_83_ce <= ap_const_logic_1;
        else 
            grp_fu_83_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln127_fu_95_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv9_190) else "0";
    sub_ln144_fu_120_p2 <= std_logic_vector(signed(a_reg_146_pp0_iter37_reg) - signed(b_reg_154_pp0_iter37_reg));
    zext_ln127_fu_112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_137),64));
end behav;
